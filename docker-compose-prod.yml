version:  '3.8'
services:
    api:
        build:
            context: .
            target: final
            dockerfile: .docker/api/Dockerfile
        depends_on:
            - db
        volumes:
            - ./api:/var/www
        environment:
            XDEBUG_SESSION: debug-local
            APP_ENV: prod
            HOST: ${HOST}
            APP_UID: ${APP_UID:-1000}
            CORS_ALLOW_ORIGIN: "^(https?://(?:.+\\.)?${HOST}(?::\\d{1,5})?)$$"
            DB_USER: ${MYSQL_USER}
            DB_NAME: ${MYSQL_DATABASE}
            DB_PASSWORD: ${MYSQL_PASSWORD}
        labels:
            - "traefik.enable=true"
            - 'traefik.docker.network=sepradcnetwork'
            # Reusable middlewares
            - "traefik.http.middlewares.force_https.redirectscheme.scheme=https"
            - "traefik.http.middlewares.rewrite_url.stripprefix.prefixes=/api"
            - "traefik.http.middlewares.rewrite_url.stripprefix.forceslash=true"
            # http://$HOST : Redirect to https
            - 'traefik.http.routers.api.rule=Host(`$HOST`) && (PathPrefix(`/api/`) || PathPrefix(`/admin`) || PathPrefix(`/bundles/`)  || PathPrefix(`/images/`))'
            - 'traefik.http.routers.api.tls=false'
            - 'traefik.http.routers.api.middlewares=rewrite_url'
            - 'traefik.http.middlewares.api.chain.middlewares=force_https, rewrite_url'
            - 'traefik.http.routers.api.service=api'
            - "traefik.http.services.api.loadbalancer.server.port=80"
            # https://$HOST
            - 'traefik.http.routers.api-tls.rule=Host(`$HOST`) && (PathPrefix(`/api/`) || PathPrefix(`/admin`) || PathPrefix(`/bundles/`) || PathPrefix(`/images/`))'
            - 'traefik.http.routers.api-tls.tls=true'
            - 'traefik.http.routers.api-tls.middlewares=rewrite_url'
            - "traefik.http.routers.api-tls.tls.certresolver=le"
            - 'traefik.http.routers.api-tls.service=api-tls'
            - "traefik.http.services.api-tls.loadbalancer.server.port=80"
            - 'traefik.http.middlewares.api-tls.chain.middlewares=rewrite_url'
        networks:
            sepradcnetwork:
            default:
    db:
        image: mariadb:10.5.5
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE:-charges-website}
            MYSQL_USER: ${MYSQL_USER:-charges-user}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD:-charges-user}
            TZ: ${TZ:-Europe/Paris}
        volumes:
            - mysql_database:/var/lib/mysql
        ports:
            - "3306:3306"
        cap_add:
            - SYS_NICE
        networks:
            default:
    front:
        build:
            target: final
            context: .
            dockerfile: .docker/front/Dockerfile
        ports:
            - "3000:3000"
        environment:
            API_BASE_URL: "http://${HOST}/api"
            API_PUBLIC_BASE_URL: "https://${HOST}/api"
        labels:
            - "traefik.enable=true"
            - 'traefik.docker.network=sepradcnetwork'
            # Reusable middlewares
            - "traefik.http.middlewares.force_https.redirectscheme.scheme=https"
            # http://$HOST : Redirect to https
            - 'traefik.http.routers.front.rule=Host(`$HOST`)'
            - 'traefik.http.routers.front.tls=false'
            - 'traefik.http.routers.front.middlewares=front'
            - 'traefik.http.middlewares.front.chain.middlewares=force_https'
            - 'traefik.http.routers.front.service=front'
            - "traefik.http.services.front.loadbalancer.server.port=3000"
            # https://$HOST
            - 'traefik.http.routers.front-tls.rule=Host(`$HOST`)'
            - 'traefik.http.routers.front-tls.tls=true'
            - "traefik.http.routers.front-tls.tls.certresolver=le"
            - 'traefik.http.routers.front-tls.service=front-tls'
            - "traefik.http.services.front-tls.loadbalancer.server.port=3000"
        networks:
            sepradcnetwork:
            default:
volumes:
    mysql_database:
    caddy_data:
    caddy_config:

networks:
    sepradcnetwork:
        external: true
